mysql-database {
  database-name = "reminder"
  user = "db_user"
  password = "db_password"
  driver = "com.mysql.cj.jdbc.Driver"
  host = "127.0.0.1"
  port = 3307
}

akka.grpc.client {
  "dinotech.ComplianceService" {
    host = 127.0.0.1
    port = 8082
  }
}

akka {
  loglevel = INFO
  actor {
    serialization-bindings = {
      "com.valsea.reminder.aggregates.CborSerializable" = jackson-cbor
    }
    provider = cluster
  }
  remote.artery {
    canonical.port = 0
    canonical.hostname = "127.0.0.1"
  }
  http {
    server.preview.enable-http2 = on
  }
  management {
    http {
      port = 9101
      hostname = "127.0.0.1"
    }
    cluster.bootstrap.contact-point-discovery {
      service-name = "reminder-service"
      discovery-method = config
      # boostrap filters ports with the same IP assuming they are previous instances running on the same node
      # unless a port is specified
      port-name = "management"
      required-contact-point-nr = 1
      # config service discovery never changes
      stable-margin = 1 ms
      # bootstrap without all the nodes being up
      contact-with-all-contact-points = false
    }
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    shutdown-after-unsuccessful-join-seed-nodes = 120s

    sharding {
      least-shard-allocation-strategy.rebalance-absolute-limit = 20
      passivation.strategy = default-strategy
    }
  }
  discovery.config.services {
    "reminder-service" {
      endpoints = [
        {host = "127.0.0.1", port = 9101}
      ]
    }
  }
  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  projection {
    jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size = 10
    jdbc.dialect = mysql-dialect
  }
}

akka-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.MySQLProfile$"
      db {
        url = "jdbc:mysql://"${mysql-database.host}":"${mysql-database.port}"/"${mysql-database.database-name}"?cachePrepStmts=true&cacheCallableStmts=true&cacheServerConfiguration=true&useLocalSessionState=true&elideSetAutoCommits=true&alwaysSendSetIsolation=false&enableQueryTimeouts=false&connectionAttributes=none&verifyServerCertificate=false&useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&useLegacyDatetimeCode=false&serverTimezone=UTC&rewriteBatchedStatements=true"
        user = ${mysql-database.user}
        password = ${mysql-database.password}
        driver = "com.mysql.cj.jdbc.Driver"
        numThreads = 5
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}

jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}

quill-ctx {
  dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource
  dataSource.url="jdbc:mysql://"${mysql-database.host}":"${mysql-database.port}"/"${mysql-database.database-name}
  dataSource.user=${mysql-database.user}
  dataSource.password=${mysql-database.password}
  dataSource.cachePrepStmts=true
  dataSource.prepStmtCacheSize=250
  dataSource.prepStmtCacheSqlLimit=2048
  connectionTimeout=30000
}

quartz-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}